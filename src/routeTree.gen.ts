/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProblemsIndexImport } from './routes/problems/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ProblemsIdImport } from './routes/problems/$id'

// Create/Update Routes

const ProblemsIndexRoute = ProblemsIndexImport.update({
  id: '/problems/',
  path: '/problems/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ProblemsIdRoute = ProblemsIdImport.update({
  id: '/problems/$id',
  path: '/problems/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/problems/$id': {
      id: '/problems/$id'
      path: '/problems/$id'
      fullPath: '/problems/$id'
      preLoaderRoute: typeof ProblemsIdImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/problems/': {
      id: '/problems/'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof ProblemsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/problems/$id': typeof ProblemsIdRoute
  '/login': typeof LoginIndexRoute
  '/problems': typeof ProblemsIndexRoute
}

export interface FileRoutesByTo {
  '/problems/$id': typeof ProblemsIdRoute
  '/login': typeof LoginIndexRoute
  '/problems': typeof ProblemsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/problems/$id': typeof ProblemsIdRoute
  '/login/': typeof LoginIndexRoute
  '/problems/': typeof ProblemsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/problems/$id' | '/login' | '/problems'
  fileRoutesByTo: FileRoutesByTo
  to: '/problems/$id' | '/login' | '/problems'
  id: '__root__' | '/problems/$id' | '/login/' | '/problems/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProblemsIdRoute: typeof ProblemsIdRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProblemsIndexRoute: typeof ProblemsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProblemsIdRoute: ProblemsIdRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProblemsIndexRoute: ProblemsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/problems/$id",
        "/login/",
        "/problems/"
      ]
    },
    "/problems/$id": {
      "filePath": "problems/$id.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/problems/": {
      "filePath": "problems/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
